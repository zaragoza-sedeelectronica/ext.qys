function isMobile(){
    return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent||navigator.vendor||window.opera)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test((navigator.userAgent||navigator.vendor||window.opera).substr(0,4)))
}

$(document).ready(function() {

	$("body").removeClass("no-js");


  // CABECERA SEDE: En plantilla normalcabecera.htm etiqueta "cabeceraSede"
  if ($(document).width() >= 768) {
    $('.navegacion-portales .panel-collapse').addClass('in');
  };

  // Botón de agrupación de portales
  $(".pbtn" ).click(function() {
    $(".navegacion-portales").slideToggle("slow");
  });

	// Home
  /*
	$('.home-p .mapaweb').remove();
	$('.home-p .navbar .dropdown > a').click(function(){
		if(isMobile() === false){
			location.href = this.href;
		};
	});

	$('.home-p .navbar-home .ogob').hover(
		function(){
			$(this).parent().removeClass('remarcada').addClass('remarcada-ogob');
			$(this).addClass('flecha-abajo');
		}, function(){
			limpiarDropdown();
		}
	);
	$('.home-p .navbar-home .ayto').hover(
		function(){
			$(this).parent().removeClass('remarcada').addClass('remarcada-ayto');
			$(this).addClass('flecha-abajo');
		}, function(){
			limpiarDropdown();
		}
	);
	$('.home-p .navbar-home .ciudad').hover(
		function(){
			$(this).parent().removeClass('remarcada').addClass('remarcada-ciudad');
			$(this).addClass('flecha-abajo');
		}, function(){
			limpiarDropdown();
		}
	);
	$('.home-p .navbar-home .cultura').hover(
		function(){
			$(this).parent().removeClass('remarcada').addClass('remarcada-cultura');
			$(this).addClass('flecha-abajo');
		}, function(){
			limpiarDropdown();
		}
	);
	$('.home-p .navbar-home .gente').hover(
		function(){
			$(this).parent().removeClass('remarcada').addClass('remarcada-gente');
			$(this).addClass('flecha-abajo');
		}, function(){
			limpiarDropdown();
		}
	);
	$('.home-p .navbar-home .turismo').hover(
		function(){
			$(this).parent().removeClass('remarcada').addClass('remarcada-turismo');
			$(this).addClass('flecha-abajo');
		}, function(){
			limpiarDropdown();
		}
	);
	
	function limpiarDropdown(){
		$('.flecha-abajo').removeClass('flecha-abajo');
		var regex = /\bremarcada-.+?\b/g;
		$('[class*="remarcada-"]').each(function(i,ele) {
			//alert(ele.className);
			ele.className = ele.className.replace(regex, 'remarcada');
		});
	}*/
	// /home
	
    if ($(window).width() < 767) {
        $('.contenido .navegacion-lateral').addClass('nav-collapse').addClass('collapse');
        $('.contenido .navegacion-lateral').parent().prepend('<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></a><span class="brand visible-phone visible-tablet">Men&uacute;</span>');
    }
    
    $('.pdf > .oculto').each(function(i, v) {
        $('.pdf:eq(' + i + ')').tooltip().attr('data-original-title', v.innerHTML);
    });
	
	$('.fecha-sistema').text(Date().toLocaleString());
	
	$('.colapsar').collapse();
});
// Generated by CoffeeScript 1.6.3
/*
# jQuery Dependent Selects v1.2.2
# Copyright 2012 Mark J Smith, Simpleweb
# Details on http://github.com/simpleweb/jquery-dependent-selects
*/
function getElementsByClass(searchClass,node,tag) {
	var classElements = new Array();
	if ( node == null )
		node = document;
	if ( tag == null )
		tag = '*';
	var els = node.getElementsByTagName(tag);
	var elsLen = els.length;
	var pattern = new RegExp("(^|\\s)"+searchClass+"(\\s|$)");
	for (i = 0, j = 0; i < elsLen; i++) {
		if ( pattern.test(els[i].className) ) {
			classElements[j] = els[i];
			j++;
		}
	}
	return classElements;
}

function mostrar(idCapa){
  if (document.layers) capa = eval("document." + idCapa);
  if (document.all) capa = eval(idCapa + ".style");
  if (document.getElementById) capa = eval('document.getElementById("' + idCapa + '").style');

  if ((capa.display == "none")){
	capa.display = (document.layers) ? "block" : "block" ;
  }else{
	capa.display = (document.layers) ? "none" : "none" ;
  }
  var titulos=getElementsByClass("titular");
  for (var i=0; i<titulos.length; i++) {
  	var titulo=titulos[i];
  	titulo.style.display = 'none';
  }
}

if ((typeof USAR_MOSTRAR_MODIFICADO != "undefined") && USAR_MOSTRAR_MODIFICADO &&
    (typeof ID_CONTENEDOR_VISUALIZADOR != "undefined") &&
    (typeof URL_VISUALIZADOR != "undefined") &&
    (typeof ID_CAPA_CONTENEDOR_VISUALIZADOR != "undefined")) {
    var mostrar_fn = mostrar;
    mostrar = function(idCapa) {
        var node = document.getElementById(idCapa);
        if ((idCapa == ID_CAPA_CONTENEDOR_VISUALIZADOR) && (node.style.display != "none")) {
            var viewerFrame = document.getElementById(ID_CONTENEDOR_VISUALIZADOR);
            if (viewerFrame) {
                viewerFrame.style.display = "none";
            }
        }
        mostrar_fn(idCapa);
        if ((idCapa == ID_CAPA_CONTENEDOR_VISUALIZADOR) && (node.style.display != "none")) {
            var viewerFrame = document.getElementById(ID_CONTENEDOR_VISUALIZADOR);
            if (viewerFrame) {
                viewerFrame.style.display = "";
                if (viewerFrame.getAttribute("src") == "") {
                    viewerFrame.setAttribute("src", URL_VISUALIZADOR);
                }
            }
        }
    }
}

function collapse() {

 var anchors = getElementsByClass("colapsado");
 var titulos=getElementsByClass("titular");
 for (var i=0; i<anchors.length; i++) {
   var element = anchors[i];
   var titulo= titulos[i];
   var parent = element.parentNode;
   var wrapper = document.createElement('div');
   wrapper.className='tarjeta clearfix'
	parent.replaceChild(wrapper, element);
	var enlace = document.createElement('a');
	var enlaceText = document.createTextNode(titulo.innerHTML);
	enlace.appendChild(enlaceText);
	element.id='el' + i;
	element.style.display='none';
	element.className='imp';
	enlace.className='destacado';
	enlace.href='javascript:mostrar("el' + i + '")';
	wrapper.appendChild(enlace);
	wrapper.appendChild(element);

 }
}


(function($) {
  return $.fn.dependentSelects = function(options) {
    var clearAllSelectsByParent, createNewSelect, createSelectId, findSelectParent, hideSelect, insertLabel, insertPlaceholderSelect, labelAtDepth, placeholderOptionAtDepth, placeholderSelectAtDepth, prepareSelect, selectChange, selectPreSelected, selectedOption, showSelect, splitOptionName;
    if (options == null) {
      options = {};
    }
    options = $.extend({
      'separator': ' > ',
      'placeholderOption': 'Selecciona una opci&oacute;n',
      'placeholderSelect': false,
      'class': false,
      'labels': false
    }, options);
    createSelectId = function() {
      var int;
      int = parseInt(Math.random() * 1000);
      if ($("[data-dependent-id='" + int + "']").length > 0) {
        return createSelectId();
      } else {
        return int;
      }
    };
    splitOptionName = function($option) {
      var array, i, item, _i, _len;
      array = $.map($option.text().split(options.separator), function(valuePart) {
        return $.trim(valuePart);
      });
      i = 0;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        item = array[_i];
        if (item === '') {
          array.splice(i, 1);
          i--;
        }
        i++;
      }
      return array;
    };
    placeholderSelectAtDepth = function(depth, $select) {
      var placeholder, text;
      depth--;
      placeholder = options.placeholderSelect;
      if (placeholder) {
        if (placeholder === true) {
          placeholder = $select.data('dependent-select-placeholders');
        }
        if (typeof placeholder === 'object') {
          if (placeholder[depth]) {
            text = placeholder[depth];
          } else {
            text = placeholder[placeholder.length - 1];
          }
        } else {
          text = placeholder;
        }
        return $("<select disabled><option>" + text + "</option></select>").attr({
          'data-dependent-depth': depth + 1,
          'data-dependent-placeholder': true,
          'data-dependent-id': $select.attr('data-dependent-id')
        });
      }
    };
    placeholderOptionAtDepth = function(depth) {
/*      var placeholder, text;
      depth--;
      placeholder = options.placeholderOption;
      if (typeof placeholder === 'object') {
        if (placeholder[depth]) {
          text = placeholder[depth];
        } else {
          text = placeholder[placeholder.length - 1];
        }
      } else {
        text = placeholder;
      }
      return $("<option>" + text + "</option>");
      */
      return '';
    };
    labelAtDepth = function(depth, $select) {
      var labels;
      depth--;
      labels = options.labels;
      if (labels) {
        if (labels === true) {
          labels = $select.data('dependent-labels');
        }
        if (labels[depth]) {
          return labels[depth];
        } else {
          return labels[labels.length - 1];
        }
      } else {
        return false;
      }
    };
    hideSelect = function($select) {
      var label, placeholder_select, select_depth, select_id;
      select_id = $select.attr('data-dependent-id');
      select_depth = $select.attr('data-dependent-depth');
      placeholder_select = $("select[data-dependent-placeholder][data-dependent-id='" + select_id + "'][data-dependent-depth='" + select_depth + "']");
      label = $("label[data-dependent-id='" + select_id + "'][data-dependent-depth='" + select_depth + "']").hide();
      if (placeholder_select.length > 0) {
        placeholder_select.show();
        label.show();
      }
      return $select.hide();
    };
    showSelect = function($select) {
      var label, placeholder_select, select_depth, select_id;
      select_id = $select.attr('data-dependent-id');
      select_depth = $select.attr('data-dependent-depth');
      placeholder_select = $("select[data-dependent-placeholder][data-dependent-id='" + select_id + "'][data-dependent-depth='" + select_depth + "']");
      label = $("label[data-dependent-id='" + select_id + "'][data-dependent-depth='" + select_depth + "']").show();
      if (placeholder_select.length > 0) {
        placeholder_select.hide();
      }
      return $select.show();
    };
    insertLabel = function($select, $parent) {
      var $label, label, select_depth, select_id;
      if (label = labelAtDepth($select.attr('data-dependent-depth'), $select)) {
        select_id = $select.attr('data-dependent-id');
        select_depth = $select.attr('data-dependent-depth');
        $label = $("<label>" + label + "</label>").attr({
          'data-dependent-id': select_id,
          'data-dependent-depth': select_depth
        });
        if (!($("label[data-dependent-id='" + select_id + "'][data-dependent-depth='" + select_depth + "']").length > 0)) {
          if ($parent) {
            return $parent.after($label);
          } else {
            return $select.before($label);
          }
        }
      }
    };
    insertPlaceholderSelect = function($select, $parent) {
      var $placeholderSelect, depth, select_id;
      if ($placeholderSelect = placeholderSelectAtDepth($select.attr('data-dependent-depth'), $select)) {
        select_id = $select.attr('data-dependent-id');
        depth = $select.attr('data-dependent-depth');
        if (!($("select[data-dependent-placeholder][data-dependent-id='" + select_id + "'][data-dependent-depth='" + depth + "']").length > 0)) {
          return $select.before($placeholderSelect);
        }
      }
    };
    clearAllSelectsByParent = function($parent) {
      return $(".dependent-sub[data-dependent-id='" + ($parent.attr('data-dependent-id')) + "']").each(function() {
        if (parseInt($(this).attr('data-dependent-depth')) > parseInt($parent.attr('data-dependent-depth'))) {
          $(this).find('option:first').attr('selected', 'selected');
          return hideSelect($(this));
        }
      });
    };
    createNewSelect = function(name, $select, depth) {
      var $currentSelect, $labels, $newSelect, select_id;
      select_id = $select.attr('data-dependent-id');
      if (($currentSelect = $("select[data-dependent-parent='" + name + "'][data-dependent-id='" + select_id + "']")).length > 0) {
        return $currentSelect;
      }
      $newSelect = $('<select class="dependent-sub"/>').attr('data-dependent-parent', name).attr('title', 'Categorias de ' + name).attr('data-dependent-depth', depth).attr('data-dependent-input-name', $select.attr('data-dependent-input-name')).attr('data-dependent-id', select_id).addClass(options["class"]).append(placeholderOptionAtDepth(depth));
      if (options.labels === true) {
        $newSelect.attr('data-dependent-labels', $select.attr('data-dependent-labels'));
      }
      if (options.placeholderSelect === true) {
        $newSelect.attr('data-dependent-select-placeholders', $select.attr('data-dependent-select-placeholders'));
      }
      if (($labels = $("label[data-dependent-id='" + select_id + "'][data-dependent-depth='" + depth + "']")).length > 0) {
        $newSelect.insertAfter($labels);
      } else {
        $newSelect.insertAfter($select);
      }
      insertLabel($newSelect, $select);
      insertPlaceholderSelect($newSelect, $select);
      return hideSelect($newSelect);
    };
    selectChange = function($select) {
      var $sub, select_id, val, valName;
      $("select[data-dependent-id='" + ($select.attr('data-dependent-id')) + "'][name]").removeAttr('name');
      valName = $select.find(':selected').html();
      val = $select.val();
      select_id = $select.attr('data-dependent-id');
      clearAllSelectsByParent($select);
      borrarCampoDeCategoria();
      if (($sub = $(".dependent-sub[data-dependent-parent='" + valName + "'][data-dependent-id='" + select_id + "']")).length > 0) {
        showSelect($sub);
        addCampoDeCategoria(valName);
        return $sub.attr('name', $select.attr('data-dependent-input-name'));
      } else {
        addCampoDeCategoria(valName);
        return $select.attr('name', $select.attr('data-dependent-input-name'));
      }
    };
    selectedOption = function($select) {
      var $selectedOption, val;
      $selectedOption = $select.find('option:selected');
      val = $selectedOption.val();
      if (!(val === '' || val === placeholderOptionAtDepth($select.attr('data-dependent-depth')).val())) {
        return $select.attr('data-dependent-selected-id', val);
      }
    };
    findSelectParent = function($select) {
      var $all_options, $selects;
      $selects = $("select[data-dependent-id='" + ($select.attr('data-dependent-id')) + "']");
      $all_options = $selects.find('option');
      return $selects.filter(function() {
        var vals;
        vals = [];
        $(this).find('option').each(function() {
          return vals.push($(this).html() === $select.attr('data-dependent-parent'));
        });
        return $.inArray(true, vals) > -1;
      });
    };
    selectPreSelected = function($select) {
      var $all_options, $current_select, $selected_option, $selected_select, $selects, current_option_text, i, selected_id, _i, _ref;
      if ((selected_id = $select.attr('data-dependent-selected-id'))) {
        $selects = $("select[data-dependent-id='" + ($select.attr('data-dependent-id')) + "']");
        $all_options = $selects.find('option');
        $selected_option = $all_options.filter("[value='" + selected_id + "']");
        $selected_select = $selected_option.closest('select');
        $current_select = $selected_select;
        
        current_option_text = $selected_option.html();
        for (i = _i = _ref = parseInt($selected_select.attr('data-dependent-depth')); _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          $current_select.find('option').each(function() {
            if ($(this).html() === current_option_text) {
              return $(this).attr('selected', 'selected');
            } else {
              return $(this).removeAttr('selected');
            }
          });
          showSelect($current_select);
          current_option_text = $current_select.attr('data-dependent-parent');
          $current_select = findSelectParent($current_select);
        }
        return $selected_select.trigger('change');
      }
    };
    prepareSelect = function($select, depth, select_id) {
      var $options, name;
      $select.attr('data-dependent-depth', depth).attr('data-dependent-id', select_id);
      $options = $select.children('option');
      $options.each(function() {
        var $newOption, $option, $subSelect, name, val;
        $option = $(this);
        name = splitOptionName($option);
        val = $option.val();
        if (name.length > 1) {
          $subSelect = createNewSelect(name[0], $select, depth + 1);
          $newOption = $option.clone();
          $newOption.html($.trim(splitOptionName($newOption).slice(1).join(options.separator)));
          $subSelect.append($newOption);
          $option.val('').html(name[0]).attr('data-dependent-name', name[0]);
          if ($options.parent().find("[data-dependent-name='" + name[0] + "']").length > 1) {
            $option.remove();
          }
          return prepareSelect($subSelect, depth + 1, select_id);
        }
      });
      name = $select.attr('name');
      selectChange($select);
      return $select.off('change').on('change', function() {
        return selectChange($select);
      });
    };
    return this.each(function() {
      var $select;
      $select = $(this);
      $select.attr('data-dependent-input-name', $select.attr('name'));
      selectedOption($select);
      prepareSelect($select, 0, createSelectId());
      return selectPreSelected($select);
    });
  };
})(jQuery);
$(function(){$('.dependent-select').dependentSelects();collapse();})

function borrarCampoDeCategoria(nombre) {
	document.getElementById("campos-plus").innerHTML='';
}
function addCampoDeCategoria(nombre) {
	
	nombre = nombre.toLowerCase();
	nombre = nombre.replace(/[^a-z0-9 -]/g, '') // remove invalid chars
				.replace(/\s+/g, '-') // collapse whitespace and replace by -
				.replace(/-+/g, '-');	
  if (nombre == 'alumbrado-publico' || nombre == 'cables-colgando' || nombre == 'columna-inclinada' || nombre == 'columna-oxidada-y-agujereada' || nombre == 'defecto-en-arqueta' || nombre == 'falta-tape-de-arqueta' || nombre == 'lmpara-apagada' || nombre == 'lmpara-intermitente' || nombre == 'luminaria-o-farol-roto' || nombre == 'pegatina-identificativa-daada-o-rota' || nombre == 'tramo-apagado') {
		document.getElementById("campos-plus").innerHTML = "<div class=\"control-group campo\"><label class=\"control-label\" for=\"matricula\">Matr&iacute;cula del punto de luz</label> <div class=\"controls\"><input type=\"text\" name=\"matricula\" id=\"matricula\" value=\"\" size=\"10\"/><span class=\"help-inline\">Pegatina blanca.</span><br/><br/><img src=\"/cont/paginas/ticketing/images/pegatina-alumbrado-pared.jpg\" alt=\"Pegatina identificativa pared\"/> <img src=\"/cont/paginas/ticketing/images/pegatina-alumbrado-farola.jpg\" alt=\"Pegatina identificativa farola\"/></div></div>";
	}
}

// Typeahead portalero
var num_results = 20;
$('#address_string').typeahead({
    source: function(query, process) {
    var nombreCalle = query.split(',')[0];
        var numeroCalle = query.split(',')[1];
        
        if (numeroCalle === undefined) {
      numeroCalle = '';
    }
        if (numeroCalle.trim().length <= 0) {
      numeroCalle = '';
    } else {
      numeroCalle=';numero==' + numeroCalle.trim();
    }
    var q = encodeURIComponent('calle.title==' + nombreCalle.trim() + '*' + numeroCalle).replace(/%20/g,'+');

        var $url ='//www.zaragoza.es/api/recurso/urbanismo-infraestructuras/portalero?rows=' + num_results + '&q=' + q + '&fl=id,calle.title,etiqueta,geometry';
        var $items = new Array();
        $.ajax({
            url: $url,
            dataType: "json",
            type: "GET",
            success: function(data) {
                $.map(data.result, function(data){
          var group;
                    group = {
                        id: data.id,
                        name: data.calle.title +','+ data.etiqueta,
                        x: data.geometry.coordinates[0],
                        y: data.geometry.coordinates[1],
                        toString: function () {
                            return JSON.stringify(this);
                        },
                        toLowerCase: function () {
                            return this.name.toLowerCase();
                        },
                        indexOf: function (string) {
              // return true;
                            return String.prototype.indexOf.apply(this.name, arguments);
                        },
                        replace: function (string) {
                            // return this.name;
                            return String.prototype.replace.apply(this.name, arguments);
                        }
                    };
                    $items.push(group);
                });
                process($items);
            }
        });
    },
    property: 'name',
    items: num_results,
    minLength: 2,
    matcher: function(item){
      return true; // Devuelve todos los resultados independientemente de query
    },
    updater: function (item) {
        var item = JSON.parse(item);
        console.log(item.name);
        $('#address_id').val(item.id);
        $('#address_string').val(item.name);
        $('#x').val(item.x);
        $('#y').val(item.y);
        parent.frames['visualizador'].getFacade().generarPunto(parseFloat(item.x),parseFloat(item.y),"EPSG:23030");
    parent.frames['visualizador'].getFacade().centrarMapa(parseFloat(item.x),parseFloat(item.y),null, null,"EPSG:23030",3000);
        return item.name;
    }
});

// Generador dinámico de tablas de contenido (indices)
if ($("#tabla-contenido").length > 0) {

	var list, el, title, link, line;
	$("#tabla-contenido").attr("role", "navigation");
	$("#tabla-contenido").attr("class", "toc fnd-gris-claro padding-a1em");
	list = "<ul>";
	
	$("h3").each(function() {
		el = $(this);
		title = el.text();
		link = title.replace(/ /g, "_");
		el.attr("id", link);
		
		line = "<li>" + "<a href='#" + link + "'>" + title + "</a>" + "</li>";
		list += line;
	});
	
	list += "</ul>";
	
	$("#tabla-contenido").append(list);
}

// Generar tags HTML extra en .nav-horizontal
// Sustituir en futuro por pseudo clases (:before, :after) al eliminar soporte IE6, IE7.
//$(".nav-horizontal div, .nav-horizontal a").removeAttr("<span>"); // Elimina los que se aÃ±adieron a mano (al principio)
if(!$(".nav-horizontal span.block > span.arrow").length){
  $(".nav-horizontal div, .nav-horizontal a").prepend("<span class='block'><span class='arrow'></span></span>");
}

// Modificar la posición de la flecha en popovers
$(function(){
	if($(window).width() < 768)
		$(".popover.static").removeClass("right").addClass("bottom");
});

$(function () {
    // make tr focusable
    $('table.tablesorter tbody tr').attr('tabindex', 0);
    // make arrows keys change row focus
    if($('table.tablesorter')){
      $('body').on('keydown', function(e){
        var $tr = $(':focus');
        // only alter arrow key default movements when a row is focused
        if ( $tr.length && $tr[0].nodeName === 'TR' ) {
            if (e.which === 40) {
                // prevent arrow causing a scroll
                // arrow scrolls 1.5 lines, so it doesn't sync up
                e.preventDefault();
                $tr.next().focus();
            } else if (e.which === 38) {
                e.preventDefault();
                $tr.prev().focus();
            }
        }   
      });
    };
    
});